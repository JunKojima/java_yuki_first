クラス名は大文字で始める慣習になっている。

System.outprintlnは文字列を表示して改行する。

LF(Linux,ラインフィード),CR(windows,キャリッジターン)

BufferedReader reader = xxxxxxxxxxxxxxxxxxxxxxx
(BufferedReader型。xxxx・・・で初期化)
new BufferedReader(yyyy・・・・)
(BufferedReaderクラスに属するオブジェクトを作れ)

BufferedReader reader = new BufferedReader(new InputStreamReader(System.in))
→・標準入力のSystem.ioを元に、InputStreamReaderオブジェクトを作り
 ・それをもとに、BufferedReaderオブジェクトを作り、
 ・変数readerを、そのBufferedReaderオブジェクトで初期化する。

(int) →　キャスト演算子

| →バーティカルライン　パイプ記号
|| →論理和　ロジカルオア

String型の文字列定数　→　二重引用符"
Char型の文字定数　→　一重引用符'

redirect(リダイレクト)
java Copy1 < input.txt > output.txt
(input.txtを入力として、output.txtを出力とする)

Stringクラス：元の文字列を書き換えられないクラス。
StringBuffeer,StringBuilder:書き換えることができるクラス。

基本型(int,char)→直接代入される
参照型(String)→オブジェクトを指し示す値が代入される。
(指されなくなった値は、ガーベッジコレクションで破棄される)

複数のメソッドで同じ名前を使うことができること→メソッドの多重定義(オーバーロード)
多重定義することで、プログラマが覚えるメソッドの名前の数を減らすことができる。
コンパイラは引数の型と個数によって、実際に使われているメソッドを識別する。
引数の型と個数→メソッドのシグニチャ

メソッドの引数は一つ一つ型を書く必要がある。
○　public static int getpower(int x, int n)
×　public static int getpower(int x, n)

配列の初期化
int[] ten = {63, 90, 75, 45, 81}

配列にまとめて代入
○　ten = new int[]{63, 90, 75, 45, 81}
×　ten = { 63, 90, 75, 45, 81}

クラス
「科目」のように、関連のある情報を１つにまとめた一般的なもの。
インスタンス
「国語、63」のように具体的なもの。

クラス宣言とフィールド
public class クラス名{
  型 フィールド名;
}

インスタンスの作り方
クラス名 変数 = new クラス名();

フィールドへの代入
インスタンス.フィールド名 = 値;

コンストラクタ
インスタンスの初期化を行うためのもの
(Kamoku kokugo  = new Kamoku("国語", 63))
→・名前がクラス名と同じ
 ・戻り値の型が書かれていない(voidでもない)

 toString
 toStringメソッドは、そのクラスの標準的な文字列表現を定めている。
 (println(kokugo ) = println(kokugo.toString()) )

 Java言語のオブジェクトとは、「インスタンス」のこと。
 オブジェクト(インスタンス)はフィールドとメソッドを持っている。
オブジェクト= フィールド + メソッド
オブジェクト = 情報 + 操作
オブジェクト = データ + 手続き
オブジェクト = それは何か + それをどうするか

オブジェクト指向の本質
「それは何か」(フィールド)と「それをどうするか」(メソッド)をひとまとまりとして書くこと。

以前のプログラム言語では、情報は情報として表現し、操作は操作として別に表現し、その２つの関係は
プログラマが頭の中で把握しているだけ、という状況がよく起こりました。
オブジェクト指向のプログラミング言語では、情報と操作をもっとはっきりと、プログラミング言語の上
で表現できるようにしよう、としているのです。



static = インスタンスを作らなくても使えるメソッド
(staticメソッド、クラスメソッド)
VS
非staticメソッド、インスタンスメソッド

クラスは、フィールドとメソッドを持っている。
フィールドには、インスタンスフィールドとクラスフィールドの２種類がある。
メソッドには、インスタンスメソッドとクラスメソッドの２種類がある。

クラスは参照型の一種
(クラスの名前は型の名前として使える)

staticメソッドであるmainの中ではthisは使えない。
(thisは「現在のインスタンス」を示すので、クラスメソッドは特定のインスタンスと関連付けられていないから)

=========以上、上の内容===============================

仮引数列 = メソッドの宣言に書かれた引数
(void setSize(int x, int h))
実引数 = メソッドを呼び出すときに与えられる引数

変数r1が確保されている領域をスタック(stack)と呼び、
Rectangleのインスタンスが確保されている領域をヒープ(heap)

クラスフィールドは「クラス変数」や「スタティックフィールド」とも呼ばれる。
=全インスタンスに共通の情報を保持する場所




